HIF003
--
-- Copyright (C) 1988-2002 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	mux_2_1.gdf
	{
		mux_2_1 [] []
		{
			10 [] [];
		}
	}
	registrador8b.gdf
	{
		registrador8b [] []
		{
			8 [] [];
		}
	}
	ddf_controledecarga.gdf
	{
		ddf_controledecarga [] []
		{
			9 [] [];
		}
	}
	xor_com_nand.gdf
	{
		xor_com_nand [] []
		{
			7 [] [];
		}
	}
	fa.gdf
	{
		fa [] []
		{
			6 [] [];
		}
	}
	incrementadorpc.gdf
	{
		incrementadorpc [] []
		{
			5 [] [];
		}
	}
	21mux.gdf
	{
		21mux [] []
		{
			4 [] [];
		}
	}
	registradorpc.gdf
	{
		registradorpc [] []
		{
			1 [] [];
		}
	}
	mux21_8bits.gdf
	{
		mux21_8bits [] []
		{
			3 [] [];
		}
	}
	pc.gdf
	{
		pc [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	pc::(0,0):(0): pc.gdf
	{
		registrador8b::(0,0):(52): registrador8b.gdf
		{
			ddf_controledecarga:9:(0,0):(1): ddf_controledecarga.gdf
			{
				flipflopd:2:(0,0):(1): flipflopd.gdf;
				mux_2_1:10:(0,0):(2): mux_2_1.gdf;
			}
			ddf_controledecarga:9:(0,0):(2): ddf_controledecarga.gdf
			{
				flipflopd:2:(0,0):(1): flipflopd.gdf;
				mux_2_1:10:(0,0):(2): mux_2_1.gdf;
			}
			ddf_controledecarga:9:(0,0):(3): ddf_controledecarga.gdf
			{
				flipflopd:2:(0,0):(1): flipflopd.gdf;
				mux_2_1:10:(0,0):(2): mux_2_1.gdf;
			}
			ddf_controledecarga:9:(0,0):(4): ddf_controledecarga.gdf
			{
				flipflopd:2:(0,0):(1): flipflopd.gdf;
				mux_2_1:10:(0,0):(2): mux_2_1.gdf;
			}
			ddf_controledecarga:9:(0,0):(5): ddf_controledecarga.gdf
			{
				flipflopd:2:(0,0):(1): flipflopd.gdf;
				mux_2_1:10:(0,0):(2): mux_2_1.gdf;
			}
			ddf_controledecarga:9:(0,0):(6): ddf_controledecarga.gdf
			{
				flipflopd:2:(0,0):(1): flipflopd.gdf;
				mux_2_1:10:(0,0):(2): mux_2_1.gdf;
			}
			ddf_controledecarga:9:(0,0):(7): ddf_controledecarga.gdf
			{
				flipflopd:2:(0,0):(1): flipflopd.gdf;
				mux_2_1:10:(0,0):(2): mux_2_1.gdf;
			}
			ddf_controledecarga:9:(0,0):(8): ddf_controledecarga.gdf
			{
				flipflopd:2:(0,0):(1): flipflopd.gdf;
				mux_2_1:10:(0,0):(2): mux_2_1.gdf;
			}
		}
		incrementadorpc::(0,0):(19): incrementadorpc.gdf
		{
			fa:6:(0,0):(8): fa.gdf
			{
				xor_com_nand:7:(0,0):(21): xor_com_nand.gdf;
				xor_com_nand:7:(0,0):(22): xor_com_nand.gdf;
			}
			fa:6:(0,0):(7): fa.gdf
			{
				xor_com_nand:7:(0,0):(21): xor_com_nand.gdf;
				xor_com_nand:7:(0,0):(22): xor_com_nand.gdf;
			}
			fa:6:(0,0):(6): fa.gdf
			{
				xor_com_nand:7:(0,0):(21): xor_com_nand.gdf;
				xor_com_nand:7:(0,0):(22): xor_com_nand.gdf;
			}
			fa:6:(0,0):(5): fa.gdf
			{
				xor_com_nand:7:(0,0):(21): xor_com_nand.gdf;
				xor_com_nand:7:(0,0):(22): xor_com_nand.gdf;
			}
			fa:6:(0,0):(4): fa.gdf
			{
				xor_com_nand:7:(0,0):(21): xor_com_nand.gdf;
				xor_com_nand:7:(0,0):(22): xor_com_nand.gdf;
			}
			fa:6:(0,0):(3): fa.gdf
			{
				xor_com_nand:7:(0,0):(21): xor_com_nand.gdf;
				xor_com_nand:7:(0,0):(22): xor_com_nand.gdf;
			}
			fa:6:(0,0):(2): fa.gdf
			{
				xor_com_nand:7:(0,0):(21): xor_com_nand.gdf;
				xor_com_nand:7:(0,0):(22): xor_com_nand.gdf;
			}
			fa:6:(0,0):(1): fa.gdf
			{
				xor_com_nand:7:(0,0):(21): xor_com_nand.gdf;
				xor_com_nand:7:(0,0):(22): xor_com_nand.gdf;
			}
		}
		mux21_8bits::(0,0):(17): mux21_8bits.gdf
		{
			21mux:4:(0,0):(8): 21mux.gdf;
			21mux:4:(0,0):(7): 21mux.gdf;
			21mux:4:(0,0):(6): 21mux.gdf;
			21mux:4:(0,0):(5): 21mux.gdf;
			21mux:4:(0,0):(4): 21mux.gdf;
			21mux:4:(0,0):(3): 21mux.gdf;
			21mux:4:(0,0):(2): 21mux.gdf;
			21mux:4:(0,0):(1): 21mux.gdf;
		}
		mux21_8bits::(0,0):(16): mux21_8bits.gdf
		{
			21mux:4:(0,0):(8): 21mux.gdf;
			21mux:4:(0,0):(7): 21mux.gdf;
			21mux:4:(0,0):(6): 21mux.gdf;
			21mux:4:(0,0):(5): 21mux.gdf;
			21mux:4:(0,0):(4): 21mux.gdf;
			21mux:4:(0,0):(3): 21mux.gdf;
			21mux:4:(0,0):(2): 21mux.gdf;
			21mux:4:(0,0):(1): 21mux.gdf;
		}
	}
}
