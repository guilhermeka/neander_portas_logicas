HIF003
--
-- Copyright (C) 1988-2002 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	xor_com_nand.gdf
	{
		xor_com_nand [] []
		{
			3 [] [];
		}
	}
	mux_2_1.gdf
	{
		mux_2_1 [] []
		{
			4 [] [];
		}
	}
	comparador.gdf
	{
		comparador [] []
		{
			5 [] [];
		}
	}
	ula_1bit.gdf
	{
		ula_1bit [] []
		{
			1 [] [];
		}
	}
	fa.gdf
	{
		fa [] []
		{
			2 [] [];
		}
	}
	ula.gdf
	{
		ula [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	ula::(0,0):(0): ula.gdf
	{
		xor_com_nand:3:(0,0):(44): xor_com_nand.gdf;
		mux_2_1:4:(0,0):(43): mux_2_1.gdf;
		comparador:5:(0,0):(38): comparador.gdf
		{
			xor_com_nand:3:(0,0):(1): xor_com_nand.gdf;
			xor_com_nand:3:(0,0):(2): xor_com_nand.gdf;
			xor_com_nand:3:(0,0):(3): xor_com_nand.gdf;
			xor_com_nand:3:(0,0):(4): xor_com_nand.gdf;
			xor_com_nand:3:(0,0):(5): xor_com_nand.gdf;
			xor_com_nand:3:(0,0):(6): xor_com_nand.gdf;
			xor_com_nand:3:(0,0):(7): xor_com_nand.gdf;
			xor_com_nand:3:(0,0):(8): xor_com_nand.gdf;
		}
		ula_1bit:1:(0,0):(1): ula_1bit.gdf
		{
			mux_2_1:4:(0,0):(14): mux_2_1.gdf;
			mux_2_1:4:(0,0):(15): mux_2_1.gdf;
			mux_2_1:4:(0,0):(16): mux_2_1.gdf;
			mux_2_1:4:(0,0):(13): mux_2_1.gdf;
			fa:2:(0,0):(1): fa.gdf
			{
				xor_com_nand:3:(0,0):(22): xor_com_nand.gdf;
				xor_com_nand:3:(0,0):(21): xor_com_nand.gdf;
			}
		}
		ula_1bit:1:(0,0):(2): ula_1bit.gdf
		{
			mux_2_1:4:(0,0):(14): mux_2_1.gdf;
			mux_2_1:4:(0,0):(15): mux_2_1.gdf;
			mux_2_1:4:(0,0):(16): mux_2_1.gdf;
			mux_2_1:4:(0,0):(13): mux_2_1.gdf;
			fa:2:(0,0):(1): fa.gdf
			{
				xor_com_nand:3:(0,0):(22): xor_com_nand.gdf;
				xor_com_nand:3:(0,0):(21): xor_com_nand.gdf;
			}
		}
		ula_1bit:1:(0,0):(3): ula_1bit.gdf
		{
			mux_2_1:4:(0,0):(14): mux_2_1.gdf;
			mux_2_1:4:(0,0):(15): mux_2_1.gdf;
			mux_2_1:4:(0,0):(16): mux_2_1.gdf;
			mux_2_1:4:(0,0):(13): mux_2_1.gdf;
			fa:2:(0,0):(1): fa.gdf
			{
				xor_com_nand:3:(0,0):(22): xor_com_nand.gdf;
				xor_com_nand:3:(0,0):(21): xor_com_nand.gdf;
			}
		}
		ula_1bit:1:(0,0):(8): ula_1bit.gdf
		{
			mux_2_1:4:(0,0):(14): mux_2_1.gdf;
			mux_2_1:4:(0,0):(15): mux_2_1.gdf;
			mux_2_1:4:(0,0):(16): mux_2_1.gdf;
			mux_2_1:4:(0,0):(13): mux_2_1.gdf;
			fa:2:(0,0):(1): fa.gdf
			{
				xor_com_nand:3:(0,0):(22): xor_com_nand.gdf;
				xor_com_nand:3:(0,0):(21): xor_com_nand.gdf;
			}
		}
		ula_1bit:1:(0,0):(5): ula_1bit.gdf
		{
			mux_2_1:4:(0,0):(14): mux_2_1.gdf;
			mux_2_1:4:(0,0):(15): mux_2_1.gdf;
			mux_2_1:4:(0,0):(16): mux_2_1.gdf;
			mux_2_1:4:(0,0):(13): mux_2_1.gdf;
			fa:2:(0,0):(1): fa.gdf
			{
				xor_com_nand:3:(0,0):(22): xor_com_nand.gdf;
				xor_com_nand:3:(0,0):(21): xor_com_nand.gdf;
			}
		}
		ula_1bit:1:(0,0):(6): ula_1bit.gdf
		{
			mux_2_1:4:(0,0):(14): mux_2_1.gdf;
			mux_2_1:4:(0,0):(15): mux_2_1.gdf;
			mux_2_1:4:(0,0):(16): mux_2_1.gdf;
			mux_2_1:4:(0,0):(13): mux_2_1.gdf;
			fa:2:(0,0):(1): fa.gdf
			{
				xor_com_nand:3:(0,0):(22): xor_com_nand.gdf;
				xor_com_nand:3:(0,0):(21): xor_com_nand.gdf;
			}
		}
		ula_1bit:1:(0,0):(7): ula_1bit.gdf
		{
			mux_2_1:4:(0,0):(14): mux_2_1.gdf;
			mux_2_1:4:(0,0):(15): mux_2_1.gdf;
			mux_2_1:4:(0,0):(16): mux_2_1.gdf;
			mux_2_1:4:(0,0):(13): mux_2_1.gdf;
			fa:2:(0,0):(1): fa.gdf
			{
				xor_com_nand:3:(0,0):(22): xor_com_nand.gdf;
				xor_com_nand:3:(0,0):(21): xor_com_nand.gdf;
			}
		}
		ula_1bit:1:(0,0):(4): ula_1bit.gdf
		{
			mux_2_1:4:(0,0):(14): mux_2_1.gdf;
			mux_2_1:4:(0,0):(15): mux_2_1.gdf;
			mux_2_1:4:(0,0):(16): mux_2_1.gdf;
			mux_2_1:4:(0,0):(13): mux_2_1.gdf;
			fa:2:(0,0):(1): fa.gdf
			{
				xor_com_nand:3:(0,0):(22): xor_com_nand.gdf;
				xor_com_nand:3:(0,0):(21): xor_com_nand.gdf;
			}
		}
	}
}
